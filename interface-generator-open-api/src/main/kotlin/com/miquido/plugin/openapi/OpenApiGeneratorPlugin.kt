/*
 * This source file was generated by the Gradle 'init' task
 */
package com.miquido.plugin.openapi

import com.miquido.plugin.openapi.configuration.OpenApiGeneratorConfiguration
import com.miquido.plugin.openapi.model.LocalOpenApiSpecification
import com.miquido.plugin.openapi.model.OpenApiLocalization
import com.miquido.plugin.openapi.model.OpenApiSpecification
import com.miquido.plugin.openapi.model.RemoteOpenApiSpecification
import com.miquido.plugin.openapi.task.*
import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.api.tasks.Copy
import org.gradle.api.tasks.Delete
import org.jetbrains.kotlin.de.undercouch.gradle.tasks.download.Download
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import org.openapitools.generator.gradle.plugin.tasks.GenerateTask


open class OpenApiGeneratorPlugin : Plugin<Project> {

    private val deleteTempFilesTaskName = "deleteTempFilesTask"
    private val copyResourcesTaskName = "copyResourcesFromPluginTask"

    private lateinit var configuration: OpenApiGeneratorConfiguration

    /**
     * Task order:
     * 1) copyResourcesTaskName
     * 2) deleteTempFilesTaskName
     * 3) contractDownloadTask / contractCopyTask
     * 4) contractGenerateTask
     * 5) kotlinCompile
     */
    override fun apply(project: Project) {
        configuration = project.extensions.create(
            "openApiGeneratorConfiguration",
            OpenApiGeneratorConfiguration::class.java
        )

        project.afterEvaluate {
            createConfigurationTasks(project)
            configuration.contracts.forEach { contract ->
                createContractFileTask(project, contract)
                createGenerateInterfacesTask(project, contract)
                addDependencies(contract, project)
            }
        }
    }

    private fun createConfigurationTasks(project: Project) {
        project.tasks.register(copyResourcesTaskName, Copy::class.java, copyResourcesTask())
        project.tasks.register(deleteTempFilesTaskName, Delete::class.java, deleteTempFilesTask())

        project.tasks.named(deleteTempFilesTaskName) {
            it.dependsOn(copyResourcesTaskName)
        }
        project.tasks.withType(KotlinCompile::class.java) {
            it.dependsOn(deleteTempFilesTaskName)
        }
    }

    private fun createContractFileTask(project: Project, contract: OpenApiSpecification) {
        if (contract.localization == OpenApiLocalization.REMOTE) {
            project.tasks.register(
                contract.downloadTaskName,
                Download::class.java,
                download(configuration.repository, contract as RemoteOpenApiSpecification)
            )
            project.tasks.named(contract.downloadTaskName) {
                it.dependsOn(project.tasks.named(copyResourcesTaskName))
            }
        } else if (contract.localization == OpenApiLocalization.LOCAL) {
            project.tasks.register(
                contract.copyTaskName,
                Copy::class.java,
                copy(configuration.local, contract as LocalOpenApiSpecification)
            )
            project.tasks.named(contract.copyTaskName) {
                it.dependsOn(project.tasks.named(copyResourcesTaskName))
            }
        }
    }

    private fun createGenerateInterfacesTask(project: Project, contract: OpenApiSpecification) =
        project.tasks.register(contract.generateTaskName, GenerateTask::class.java, generateInterfaceTask(contract))


    private fun addDependencies(contract: OpenApiSpecification, project: Project) {
        if (contract.localization == OpenApiLocalization.REMOTE) {
            project.tasks.named(contract.generateTaskName) {
                it.dependsOn(contract.downloadTaskName)
            }
        } else if (contract.localization == OpenApiLocalization.LOCAL) {
            project.tasks.named(contract.generateTaskName) {
                it.dependsOn(contract.copyTaskName)
            }
        }
        project.tasks.withType(KotlinCompile::class.java) {
            it.dependsOn(contract.generateTaskName)
        }
    }
}